{"version":3,"sources":["components/ColorModeSwitcher.tsx","components/FormInputs/Control.tsx","components/FormError.tsx","components/FormInputs/InputControl.tsx","components/FormInputs/SelectInputControl.tsx","helpers/inputFieldFormatters.ts","helpers/inputFieldValidators.ts","components/Icons.tsx","constants/dishInputFields.tsx","components/DishForm.tsx","constants/api.ts","components/DishFormContainer.tsx","App.tsx","theme.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Control","name","useField","subscription","touched","error","meta","isInvalid","FormError","Warning","mr","InputControl","label","placeholder","parser","validator","leftInputElement","type","parse","validate","input","htmlFor","id","value","children","Check","SelectInputControl","formatInt","trim","parseInt","formatTimeField","replace","length","slice","validateMinMaxIntValue","min","max","errorMsg","_","__","isNaN","validateIsRequired","validateRegex","regex","test","InputFieldIcon","createIcon","displayName","defaultProps","fill","stroke","strokeWidth","d","PizzaSliceIcon","strokeLinecap","strokeLinejoin","path","CircleIcon","ScaleIcon","extraDishInputFields","pizza","pointerEvents","parseFloat","validateMinMaxFloatValue","sandwich","soup","DishForm","useState","extraFormInputs","setExtraFormInputs","toast","useToast","onSubmit","values","form","a","url","body","extraOptions","postFetch","fetch","method","headers","JSON","stringify","response","json","data","ok","status","console","log","title","description","duration","restart","undefined","onDishTypeChange","e","target","render","handleSubmit","submitting","p","mt","mb","textAlign","as","RegExp","Time","onChange","map","extraInput","index","key","width","isLoading","loadingText","colorScheme","spinnerPlacement","DishFormContainer","align","m","maxWidth","boxShadow","minHeight","borderRadius","borderWidth","App","theme","minH","flexDirection","alignSelf","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d94368d6.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>;\n\nexport const ColorModeSwitcher = (props: ColorModeSwitcherProps) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport { useField } from 'react-final-form';\nimport { FormControl } from '@chakra-ui/react';\n\ninterface Props {\n  name: string;\n  children: React.ReactNode;\n\n  [prop: string]: any;\n}\n\nexport const Control = ({ name, ...props }: Props) => {\n  const {\n    meta: { error, touched },\n  } = useField(name, { subscription: { touched: true, error: true } });\n\n  return <FormControl {...props} isInvalid={error && touched} />;\n};\n","import React from 'react';\nimport { FormErrorMessage } from '@chakra-ui/react';\nimport { useField } from 'react-final-form';\nimport { WarningIcon } from '@chakra-ui/icons';\n\ninterface Props {\n  name: string;\n}\n\nexport const FormError = ({ name }: Props) => {\n  const {\n    meta: { error },\n  } = useField(name, {\n    subscription: {\n      error: true,\n    },\n  });\n\n  return (\n    <FormErrorMessage>\n      <WarningIcon mr={1} /> {error}\n    </FormErrorMessage>\n  );\n};\n","import React from 'react';\nimport { Control } from './Control';\nimport { FormLabel, Input, InputGroup, InputRightElement } from '@chakra-ui/react';\nimport { FormError } from '../FormError';\nimport { useField } from 'react-final-form';\nimport { FormInputProps } from '../../types/inputs';\nimport { CheckIcon } from '@chakra-ui/icons';\n\nexport const InputControl = ({\n  name,\n  label,\n  placeholder,\n  parser,\n  validator,\n  leftInputElement,\n  type = 'text',\n  ...props\n}: FormInputProps) => {\n  const { input, meta } = useField(name, {\n    parse: parser,\n    validate: validator,\n  });\n  placeholder = placeholder ? placeholder : label;\n\n  return (\n    <Control name={name} {...props}>\n      <FormLabel htmlFor={name}>{label}</FormLabel>\n      <InputGroup>\n        {leftInputElement}\n        <Input\n          {...input}\n          isInvalid={meta.error && meta.touched}\n          id={name}\n          placeholder={placeholder}\n          type={type}\n          value={input.value || ''} // https://github.com/final-form/react-final-form/issues/529#issuecomment-548915527\n        />\n        {!meta.error && meta.touched && (\n          <InputRightElement children={<CheckIcon color=\"green.400\" />} />\n        )}\n      </InputGroup>\n\n      <FormError name={name} />\n    </Control>\n  );\n};\n","import React from 'react';\nimport { useField } from 'react-final-form';\nimport { Control } from './Control';\nimport { FormLabel, Select } from '@chakra-ui/react';\nimport { FormError } from '../FormError';\nimport { FormInputProps } from '../../types/inputs';\n\ninterface Props extends Omit<FormInputProps, 'validator' | 'type' | 'leftInputElement'> {\n  children: React.ReactNode;\n}\n\nexport const SelectInputControl = ({\n  name,\n  label,\n  validator,\n  children,\n  placeholder,\n  ...props\n}: Props) => {\n  const { input, meta } = useField(name, {\n    validate: validator,\n  });\n\n  placeholder = placeholder ? placeholder : label;\n\n  return (\n    <Control name={name} {...props}>\n      <FormLabel htmlFor={name}>{label}</FormLabel>\n      <Select placeholder={placeholder} id={name} {...input} isInvalid={meta.error && meta.touched}>\n        {children}\n      </Select>\n      <FormError name={name} />\n    </Control>\n  );\n};\n","export const formatFloat = (value: any, name: string): any => {\n  if (!value) return value;\n  value = value.trim();\n  return parseFloat(value.replace(',', '.'));\n};\n\nexport const formatInt = (value: any, name: string): any => {\n  if (!value) return value;\n  value = value.trim();\n  return parseInt(value);\n};\n\nexport const formatTimeField = (value: any, name: string): any => {\n  if (!value) return value;\n  value = value.trim().replace(/[^\\d]/g, '');\n\n  if (value.length <= 2) return value;\n\n  if (value.length <= 4) return `${value.slice(0, 2)}:${value.slice(2)}`;\n\n  return `${value.slice(0, 2)}:${value.slice(2, 4)}:${value.slice(4, 6)}`;\n};\n","import { FieldState } from 'final-form';\n\nexport type ValidatorType = (value: any, allValues: Object, meta?: FieldState<any>) => any;\n\nexport const validateMinMaxIntValue =\n  (min: number, max: number, errorMsg = 'Enter a valid number') =>\n  (value: any, _: Object, __?: FieldState<any>) => {\n    if (!value) return errorMsg;\n    value = parseInt(value);\n    if (isNaN(value)) return errorMsg;\n\n    if (value > max || value < min) {\n      return errorMsg;\n    }\n\n    return undefined;\n  };\n\nexport const validateMinMaxFloatValue =\n  (min: number, max: number, errorMsg = 'Enter a valid number') =>\n  (value: any, _: Object, __?: FieldState<any>) => {\n    if (!value) return errorMsg;\n    value = parseFloat(value);\n    if (isNaN(value)) return errorMsg;\n\n    if (value > max || value < min) {\n      return errorMsg;\n    }\n\n    return undefined;\n  };\n\nexport const validateIsRequired =\n  (errorMsg = 'Field is required') =>\n  (value: any, _: Object, __?: FieldState<any>) => {\n    if (!value) return errorMsg;\n\n    return undefined;\n  };\n\nexport const validateRegex =\n  (regex: RegExp, errorMsg = 'Enter a valid field') =>\n  (value: any, _: Object, __?: FieldState<any>) => {\n    if (!value) return errorMsg;\n    if (!regex.test(value)) return errorMsg;\n\n    return undefined;\n  };\n","import { createIcon } from '@chakra-ui/icons';\n\nexport const InputFieldIcon = createIcon({\n  displayName: 'InputFieldIcon',\n  defaultProps: {\n    fill: 'transparent',\n    stroke: 'currentColor',\n    strokeWidth: '2',\n  },\n  d: 'M3 17.4V6.6c0-.33137.26863-.6.6-.6h13.0789c.2006 0 .3879.10026.4992.26718l3.6 5.40002c.1344.2015.1344.4641 0 .6656l-3.6 5.4c-.1113.1669-.2986.2672-.4992.2672H3.6c-.33137 0-.6-.2686-.6-.6z',\n});\n\nexport const PizzaSliceIcon = createIcon({\n  displayName: 'PizzaSliceIcon',\n  defaultProps: {\n    fill: 'transparent',\n    stroke: 'currentColor',\n    strokeWidth: '2',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n  },\n  path: [\n    <path key={1} d=\"M14 9.01l.01-.01111M8 8.01l.01-.01111M8 14.01l.01-.0111\" />,\n    <path key={2} d=\"M6 19L2.23626 3.0041c-.10539-.44792.31189-.84288.75335-.71304L19 7\" />,\n    <path\n      key={3}\n      d=\"M22.198 8.42467c.2344-.93764-.3357-1.88777-1.2733-2.12218-.9377-.23441-1.8878.33567-2.1222 1.27331-.3919 1.56738-1.901 4.0483-4.2272 6.3745-2.301 2.301-5.14816 4.1939-7.96858 4.8448-.94175.2173-1.52901 1.1569-1.31168 2.0986.21732.9418 1.15694 1.529 2.09869 1.3117 3.67967-.8491 7.08247-3.2063 9.65647-5.7802 2.5487-2.5488 4.5396-5.5679 5.1478-8.00053z\"\n    />,\n  ],\n});\n\nexport const CircleIcon = createIcon({\n  displayName: 'CircleIcon',\n  defaultProps: {\n    fill: 'transparent',\n    stroke: 'currentColor',\n    strokeWidth: '2',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n  },\n  d: 'M12 22c5.5228 0 10-4.4772 10-10 0-5.52285-4.4772-10-10-10C6.47715 2 2 6.47715 2 12c0 5.5228 4.47715 10 10 10z',\n});\n\nexport const ScaleIcon = createIcon({\n  displayName: 'ScaleIcon',\n  defaultProps: {\n    fill: 'transparent',\n    stroke: 'currentColor',\n    strokeWidth: '2',\n    strokeLinecap: 'round',\n    strokeLinejoin: 'round',\n  },\n  d: 'M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3',\n});\n","import { formatFloat, formatInt } from '../helpers/inputFieldFormatters';\nimport {\n  validateMinMaxFloatValue,\n  validateMinMaxIntValue,\n  ValidatorType,\n} from '../helpers/inputFieldValidators';\nimport React from 'react';\nimport { InputLeftElement } from '@chakra-ui/react';\nimport { PizzaSliceIcon, CircleIcon, ScaleIcon } from '../components/Icons';\n\nexport type Dishes = 'pizza' | 'sandwich' | 'soup';\nexport type InputFormat = (value: any, name: string) => any;\n\nexport interface DishInputFieldInterface {\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  parser?: InputFormat;\n  validator?: ValidatorType;\n  leftInputElement?: React.ReactNode;\n}\n\nexport const extraDishInputFields: Record<Dishes, DishInputFieldInterface[]> = {\n  pizza: [\n    {\n      name: 'no_of_slices',\n      type: 'number',\n      label: 'Number of pizza slices',\n      placeholder: '1',\n      leftInputElement: (\n        <InputLeftElement pointerEvents={'none'} children={<PizzaSliceIcon color=\"gray.400\" />} />\n      ),\n      parser: formatInt,\n      validator: validateMinMaxIntValue(1, 99, 'Enter a valid number of slices between 1 and 99'),\n    },\n    {\n      name: 'diameter',\n      type: 'number',\n      label: 'Diameter (in cm)',\n      placeholder: '22',\n      leftInputElement: (\n        <InputLeftElement pointerEvents={'none'} children={<CircleIcon color=\"gray.400\" />} />\n      ),\n      parser: formatFloat,\n      validator: validateMinMaxFloatValue(\n        10.0,\n        40.0,\n        'Enter a valid diameter size between 10.0 and 40.0',\n      ),\n    },\n  ],\n  sandwich: [\n    {\n      name: 'slices_of_bread',\n      type: 'number',\n      label: 'Number of bread slices',\n      placeholder: '1',\n      leftInputElement: (\n        <InputLeftElement pointerEvents={'none'} children={<PizzaSliceIcon color=\"gray.400\" />} />\n      ),\n      parser: formatInt,\n      validator: validateMinMaxIntValue(1, 99, 'Enter a valid number of slices between 1 and 99'),\n    },\n  ],\n  soup: [\n    {\n      name: 'spiciness_scale',\n      type: 'number',\n      label: 'Scale of spiciness (1-10)',\n      placeholder: '1',\n      leftInputElement: (\n        <InputLeftElement pointerEvents={'none'} children={<ScaleIcon color=\"gray.400\" />} />\n      ),\n      parser: formatInt,\n      validator: validateMinMaxIntValue(\n        1,\n        10,\n        'Enter a valid scale of spiciness between 1 and 10',\n      ),\n    },\n  ],\n};\n","import { Box, Button, InputLeftElement, useToast } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { Form } from 'react-final-form';\nimport { InputControl } from './FormInputs/InputControl';\nimport { SelectInputControl } from './FormInputs/SelectInputControl';\nimport {\n  Dishes,\n  DishInputFieldInterface,\n  extraDishInputFields,\n} from '../constants/dishInputFields';\nimport { validateRegex, validateIsRequired } from '../helpers/inputFieldValidators';\nimport { formatTimeField } from '../helpers/inputFieldFormatters';\nimport { postFetch } from '../constants/api';\nimport { FormApi } from 'final-form';\nimport { InputFieldIcon } from './Icons';\nimport { TimeIcon } from '@chakra-ui/icons';\n\nexport const DishForm = () => {\n  const [extraFormInputs, setExtraFormInputs] = useState<DishInputFieldInterface[] | undefined>();\n  const toast = useToast();\n\n  const onSubmit = async (values: Object, form: FormApi) => {\n    try {\n      const response = await postFetch('dishes', values);\n      const data = await response.json();\n\n      if (!response.ok) {\n        const error = data ? data : response.status;\n        console.log('error', error);\n        toast({\n          title: 'Error',\n          description: `Error creating dish: ${error.type ? error.type : error}`,\n          status: 'error',\n          duration: 5000,\n        });\n        return;\n      }\n\n      toast({\n        title: 'Dish created',\n        description: 'Dish has been successfully created!',\n        status: 'success',\n        duration: 5000,\n      });\n\n      form.restart();\n      setExtraFormInputs(undefined);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Error creating dish: ${error}`,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const onDishTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setExtraFormInputs(extraDishInputFields[e.target.value as Dishes]);\n  };\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      render={({ handleSubmit, submitting }) => (\n        <Box p={4} mt={4} mb={2} textAlign=\"left\" as=\"form\" onSubmit={handleSubmit}>\n          <InputControl\n            name={'name'}\n            label={'Dish name'}\n            placeholder={'Enter dish name'}\n            leftInputElement={\n              <InputLeftElement\n                pointerEvents={'none'}\n                children={<InputFieldIcon color=\"gray.400\" />}\n              />\n            }\n            validator={validateRegex(new RegExp(/^[a-zA-Z\\s]{3,30}$/), 'Enter a valid dish name')}\n          />\n          <InputControl\n            name={'preparation_time'}\n            label={'Preparation time'}\n            placeholder={'00:00:00'}\n            mt={4}\n            leftInputElement={\n              <InputLeftElement pointerEvents={'none'} children={<TimeIcon color=\"gray.400\" />} />\n            }\n            parser={formatTimeField}\n            validator={validateRegex(\n              new RegExp(/^[0-9]+[:][0-5][0-9][:][0-5][0-9]$/),\n              'Enter valid preparation time',\n            )}\n          />\n\n          <SelectInputControl\n            mt={4}\n            name={'type'}\n            label={'Type'}\n            placeholder={'Select dish type'}\n            onChange={onDishTypeChange}\n            validator={validateIsRequired('Dish type is required')}\n          >\n            <option value=\"pizza\">🍕 Pizza</option>\n            <option value=\"soup\">🥣 Soup</option>\n            <option value=\"sandwich\">🥪 Sandwich</option>\n          </SelectInputControl>\n\n          {extraFormInputs &&\n            extraFormInputs.map((extraInput, index) => (\n              <InputControl {...extraInput} key={index} mt={4} />\n            ))}\n\n          <Button\n            width=\"full\"\n            type=\"submit\"\n            mt={4}\n            isLoading={submitting}\n            loadingText={'Submitting'}\n            colorScheme={'blue'}\n            spinnerPlacement=\"end\"\n          >\n            Submit\n          </Button>\n        </Box>\n      )}\n    />\n  );\n};\n","export const API_URL = 'https://frosty-wood-6558.getsandbox.com:443';\n\nexport const postFetch = (url: string, body: Object, extraOptions?: Partial<Request>) =>\n  fetch(`${API_URL}/${url}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body),\n    ...extraOptions,\n  });\n","import React from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { DishForm } from './DishForm';\n\nexport const DishFormContainer = () => {\n  return (\n    <Box\n      align={'center'}\n      p={2}\n      m={'auto auto'}\n      width={'full'}\n      maxWidth={'500px'}\n      boxShadow={'lg'}\n      minHeight={'400px'}\n      borderRadius={8}\n      borderWidth={1}\n    >\n      <Heading mt={4}>Dish form</Heading>\n      <DishForm />\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport { ChakraProvider, Box, theme, Flex } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './components/ColorModeSwitcher';\nimport { DishFormContainer } from './components/DishFormContainer';\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Flex minH=\"100vh\" p={4} width=\"full\" flexDirection={'column'}>\n        <ColorModeSwitcher alignSelf=\"flex-end\" />\n        <DishFormContainer />\n      </Flex>\n    </Box>\n  </ChakraProvider>\n);\n","import {extendTheme, ThemeConfig } from \"@chakra-ui/react\";\r\n\r\nconst config: ThemeConfig = {\r\n    initialColorMode: \"dark\",\r\n    useSystemColorMode: false\r\n};\r\n\r\nexport const theme = extendTheme({config});","import { ColorModeScript } from '@chakra-ui/react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}